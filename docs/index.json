[{"categories":["LaTeX"],"content":"Did you ever need empty placeholder boxes in your LaTeX document. I did, and here is a nice way to solve the problem ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:0:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#"},{"categories":["LaTeX"],"content":"\r7 First AttemptLet‚Äôs first start with some basic definitions LaTeX \\documentclass{article} % A4 layout \\usepackage[a4paper,margin=2.5cm]{geometry} % Greek + English (UTF-8) with pdfLaTeX \\usepackage[utf8]{inputenc} \\usepackage[english,greek]{babel} % switch with \\selectlanguage{greek} / {english} % Arrays and spacing \\usepackage{array} \\renewcommand{\\arraystretch}{1.6} % line spacing between rows\rThe only command that needs explaining is \\renewcommand{\\arraystretch}{1.6}, which increases row height globally; you can add per-row extra space with \\[4pt] too. The other commands just enable greek and english characters (or you can use XeLaTeX and polyglossia) ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:1:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#first-attempt"},{"categories":["LaTeX"],"content":"\r8 Adding xparse package\rLatex \\usepackage{xparse}\rThe xparse package gives LaTeX a more powerful way to define commands and environments compared to the old \\newcommand It allows optional arguments with defaults, multiple types of arguments, key‚Äìvalue style arguments, etc. Without it, \\newcommand is more limited (only mandatory args and one optional with a fixed default). Perfect üëå Let‚Äôs break it all down step by step. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:2:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#adding-xparse-package"},{"categories":["LaTeX"],"content":"\r8.1 1. \\usepackage{xparse}The xparse package gives LaTeX a more powerful way to define commands and environments compared to the old \\newcommand. It allows optional arguments with defaults, multiple types of arguments, key‚Äìvalue style arguments, etc. Without it, \\newcommand is more limited (only mandatory args and one optional with a fixed default). ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:2:1","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#1-usepackagexparse"},{"categories":["LaTeX"],"content":"\r8.2 2. \\NewDocumentCommand vs \\newcommand \\newcommand{\\foo}[2][default]{...} ‚Üí only supports: up to 9 arguments at most one optional argument (and it must be the first one) \\NewDocumentCommand{\\foo}{argument-spec}{...} ‚Üí supports: unlimited arguments optional arguments anywhere in the argument list multiple defaults, star forms, key‚Äìvalue, etc. much clearer specification syntax So we use \\NewDocumentCommand because it‚Äôs more expressive. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:2:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#2-newdocumentcommand-vs-newcommand"},{"categories":["LaTeX"],"content":"\r9 Creating the first iteration of digitbox\rlatex % \\digitbox[\u003cwidth\u003e][\u003cheight\u003e] (defaults: 8mm x 10mm) \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm}}{% \\begingroup \\setlength{\\fboxsep}{0pt}% no inner padding \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}}% \\endgroup }\r","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#creating-the-first-iteration-of-digitbox"},{"categories":["LaTeX"],"content":"\r9.1 1. The O{8mm} O{10mm} in \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm}} In the argument specification, O{\u003cdefault\u003e} means optional argument with default value \u003cdefault\u003e. So here: First optional argument: width (default 8mm) Second optional argument: height (default 10mm) That‚Äôs why you can call \\digitbox: \\digitbox ‚Üí box of 8mm √ó 10mm \\digitbox[12mm] ‚Üí width 12mm, height still 10mm \\digitbox[12mm][15mm] ‚Üí width 12mm, height 15mm ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:1","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#1-the-o8mm-o10mm-in-newdocumentcommanddigitboxo8mm-o10mm"},{"categories":["LaTeX"],"content":"\r9.2 2. \\fboxsep LaTeX adds padding inside framed boxes by default. \\fboxsep is the length of that padding. Default is around 3pt. Setting \\setlength{\\fboxsep}{0pt} removes the extra whitespace, so the frame hugs your content exactly. Without this, the box would look oversized compared to digits. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#2-fboxsep"},{"categories":["LaTeX"],"content":"\r9.3 3. Make the actual box: \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}}Let‚Äôs dissect: \\fbox{...} ‚Üí draws a rectangular frame around its contents. \\makebox[#1]{...} ‚Üí makes a box of width #1. If contents are smaller, it pads (here empty). \\rule{0pt}{#2} ‚Üí makes an invisible vertical rule with: width 0pt (so not visible horizontally) height #2 (so the box gets that much tall). Together: Width = #1 (first argument, e.g. 8mm) Height = #2 (second argument, e.g. 10mm) Content is invisible, so you just see an empty framed box. That‚Äôs how we force \\fbox to have fixed dimensions instead of shrinking to its contents. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:3","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#3-make-the-actual-box-fboxmakebox1rule0pt2"},{"categories":["LaTeX"],"content":"\r9.4 4. Removing the % from the commands alters the result. Why?You will ask, isn‚Äôt % just for comments? Well yes, % is indeed the comment character in LaTeX. But in TeX, it has one extra important side effect: it also removes the newline (or space) that follows it. 9.4.0.1 What‚Äôs going on here?Let‚Äôs look at our code: latex \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm}}{% \\begingroup \\setlength{\\fboxsep}{0pt}% no inner padding \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}}% \\endgroup }\rThe % at the end of each line tells LaTeX: ‚ÄúIgnore the rest of this line‚Äù (the comment part). ‚ÄúAlso suppress the newline that would otherwise count as a space.‚Äù So the command body is really glued together without any unwanted spaces between tokens. 9.4.0.2 Why does it matter?If you remove the %, then the end-of-line after each line break is treated like a space character. For example: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} \\endgroup\rHere, after the } you have an implicit space (because of the line break). LaTeX sees it as if you had typed: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} ‚ê£ \\endgroup\rThat extra space can: Sneak into your boxes as an actual space of width ~0.3em. Shift alignment slightly. Make the page look different, depending on where the macro is used. 9.4.0.3 Rule of thumb If you‚Äôre writing macros and don‚Äôt want spurious spaces creeping in, end lines with %. If spaces/newlines are significant, don‚Äôt use %. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:4","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#4-removing-the--from-the-commands-alters-the-result-why"},{"categories":["LaTeX"],"content":"\r9.4 4. Removing the % from the commands alters the result. Why?You will ask, isn‚Äôt % just for comments? Well yes, % is indeed the comment character in LaTeX. But in TeX, it has one extra important side effect: it also removes the newline (or space) that follows it. 9.4.0.1 What‚Äôs going on here?Let‚Äôs look at our code: latex \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm}}{% \\begingroup \\setlength{\\fboxsep}{0pt}% no inner padding \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}}% \\endgroup }\rThe % at the end of each line tells LaTeX: ‚ÄúIgnore the rest of this line‚Äù (the comment part). ‚ÄúAlso suppress the newline that would otherwise count as a space.‚Äù So the command body is really glued together without any unwanted spaces between tokens. 9.4.0.2 Why does it matter?If you remove the %, then the end-of-line after each line break is treated like a space character. For example: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} \\endgroup\rHere, after the } you have an implicit space (because of the line break). LaTeX sees it as if you had typed: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} ‚ê£ \\endgroup\rThat extra space can: Sneak into your boxes as an actual space of width ~0.3em. Shift alignment slightly. Make the page look different, depending on where the macro is used. 9.4.0.3 Rule of thumb If you‚Äôre writing macros and don‚Äôt want spurious spaces creeping in, end lines with %. If spaces/newlines are significant, don‚Äôt use %. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:4","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#whats-going-on-here"},{"categories":["LaTeX"],"content":"\r9.4 4. Removing the % from the commands alters the result. Why?You will ask, isn‚Äôt % just for comments? Well yes, % is indeed the comment character in LaTeX. But in TeX, it has one extra important side effect: it also removes the newline (or space) that follows it. 9.4.0.1 What‚Äôs going on here?Let‚Äôs look at our code: latex \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm}}{% \\begingroup \\setlength{\\fboxsep}{0pt}% no inner padding \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}}% \\endgroup }\rThe % at the end of each line tells LaTeX: ‚ÄúIgnore the rest of this line‚Äù (the comment part). ‚ÄúAlso suppress the newline that would otherwise count as a space.‚Äù So the command body is really glued together without any unwanted spaces between tokens. 9.4.0.2 Why does it matter?If you remove the %, then the end-of-line after each line break is treated like a space character. For example: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} \\endgroup\rHere, after the } you have an implicit space (because of the line break). LaTeX sees it as if you had typed: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} ‚ê£ \\endgroup\rThat extra space can: Sneak into your boxes as an actual space of width ~0.3em. Shift alignment slightly. Make the page look different, depending on where the macro is used. 9.4.0.3 Rule of thumb If you‚Äôre writing macros and don‚Äôt want spurious spaces creeping in, end lines with %. If spaces/newlines are significant, don‚Äôt use %. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:4","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#why-does-it-matter"},{"categories":["LaTeX"],"content":"\r9.4 4. Removing the % from the commands alters the result. Why?You will ask, isn‚Äôt % just for comments? Well yes, % is indeed the comment character in LaTeX. But in TeX, it has one extra important side effect: it also removes the newline (or space) that follows it. 9.4.0.1 What‚Äôs going on here?Let‚Äôs look at our code: latex \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm}}{% \\begingroup \\setlength{\\fboxsep}{0pt}% no inner padding \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}}% \\endgroup }\rThe % at the end of each line tells LaTeX: ‚ÄúIgnore the rest of this line‚Äù (the comment part). ‚ÄúAlso suppress the newline that would otherwise count as a space.‚Äù So the command body is really glued together without any unwanted spaces between tokens. 9.4.0.2 Why does it matter?If you remove the %, then the end-of-line after each line break is treated like a space character. For example: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} \\endgroup\rHere, after the } you have an implicit space (because of the line break). LaTeX sees it as if you had typed: latex \\fbox{\\makebox[#1]{\\rule{0pt}{#2}}} ‚ê£ \\endgroup\rThat extra space can: Sneak into your boxes as an actual space of width ~0.3em. Shift alignment slightly. Make the page look different, depending on where the macro is used. 9.4.0.3 Rule of thumb If you‚Äôre writing macros and don‚Äôt want spurious spaces creeping in, end lines with %. If spaces/newlines are significant, don‚Äôt use %. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:3:4","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#rule-of-thumb"},{"categories":["LaTeX"],"content":"\r10 We want our digit boxes to have contents.","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:4:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#we-want-our-digit-boxes-to-have-contents"},{"categories":["LaTeX"],"content":"\r10.1 1. Changing our code.Let‚Äôs change our command to Latex % With content: \\NewDocumentCommand{\\digitbox}{O{8mm} O{10mm} m}{% \\begingroup \\setlength{\\fboxsep}{0pt}% \\fbox{\\makebox[#1][c]{\\rule{0pt}{#2}\\smash{#3}}}% \\endgroup } % Blank box: \\NewDocumentCommand{\\emptybox}{O{8mm} O{10mm}}{\\digitbox[#1][#2]{}}\rWe create an emptybox command, to be able to have easy access to empty squares. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:4:1","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#1-changing-our-code"},{"categories":["LaTeX"],"content":"\r10.2 2. What does that \\smash does?\\smash{stuff} tells TeX: ‚ÄúIgnore the height and depth of stuff when calculating vertical spacing. Treat it as if it has zero height and depth.‚Äù Horizontal width is kept. Vertical dimensions are suppressed. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:4:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#2-what-does-that-smash-does"},{"categories":["LaTeX"],"content":"\r10.3 3. Why it matters here?If you just put #3 inside, the box‚Äôs vertical size would be influenced by how tall that character or number is (e.g. an uppercase A vs. lowercase g vs. digit 5). That means the boxes could end up with slightly different heights depending on their content. By using \\smash{#3}: The height/depth of #3 is ignored. The rule (\\rule{0pt}{#2}) alone controls the vertical dimension. Thus, all boxes stay the same height, and the content is vertically centered inside them. Notes: \\raisebox{0pt}[0pt][0pt]{#3} is equivalent to \\smash{$3} Instead of \\rule{0pt}{#2}, we can use a ‚Äúphantom character‚Äù that fixes height: \\fbox{\\makebox[#1][c]{\\vphantom{\\rule{0pt}{#2}}#3}} ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:4:3","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#3-why-it-matters-here"},{"categories":["LaTeX"],"content":"\r11 Our digits are too small and not vertically aligned.What we see is that our digits are too small compared to the box. We would like them to grow with the box. Let‚Äôs fix it. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:5:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#our-digits-are-too-small-and-not-vertically-aligned"},{"categories":["LaTeX"],"content":"\r11.1 1. Changing the command\rLatex \\NewDocumentCommand{\\digitbox}{O{10mm} O{12mm} m}{% \\begingroup \\setlength{\\fboxsep}{0pt}% \\fbox{\\parbox[c][#2][c]{#1}{\\centering \\strut #3}}% \\endgroup } \\NewDocumentCommand{\\emptybox}{O{10mm} O{12mm}}{\\digitbox[#1][#2]{}}\r","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:5:1","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#1-changing-the-command"},{"categories":["LaTeX"],"content":"\r11.2 2. What is the parbox and what is the difference with fbox?\r11.2.1 \\parbox A \\parbox is a text box that can contain paragraph material (multiple lines, text, math, etc.). You can specify: width ‚Üí mandatory argument (e.g., 5cm) height ‚Üí optional argument (e.g., [2cm]) vertical alignment inside the box (top, center, bottom). The contents are typeset as if it were a mini page of that width. Example: latex \\parbox[c][12mm][c]{20mm}{Hello \\\\ World}\r‚Üí box 20mm wide, 12mm tall, content centered vertically, with two lines of text. Think: ‚Äúa mini container that controls line breaking and vertical alignment‚Äù. 11.2.2 \\fbox \\fbox just draws a frame around whatever box you give it. It does not set width, height, or alignment by itself ‚Äî it wraps its contents. By default, it adds inner padding (\\fboxsep) and uses line thickness (\\fboxrule). Example: latex \\fbox{Hello}\r‚Üí draws a rectangle just large enough to fit ‚ÄúHello‚Äù plus padding. Think: ‚Äúa picture frame for an existing box‚Äù. 11.2.3 The difference \\parbox = content box (controls size + vertical alignment). \\fbox = frame wrapper (draws a border around its contents). They are often used together: latex \\fbox{ \\parbox[c][12mm][c]{20mm}{Hello} }\r‚Üí a framed box, fixed width = 20mm, fixed height = 12mm, with ‚ÄúHello‚Äù centered inside. That‚Äôs exactly what we did for your \\digitbox: \\parbox ensures the box has fixed width/height and centers the content. \\fbox then draws the border around it. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:5:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#2-what-is-the-parbox-and-what-is-the-difference-with-fbox"},{"categories":["LaTeX"],"content":"\r11.2 2. What is the parbox and what is the difference with fbox?\r11.2.1 \\parbox A \\parbox is a text box that can contain paragraph material (multiple lines, text, math, etc.). You can specify: width ‚Üí mandatory argument (e.g., 5cm) height ‚Üí optional argument (e.g., [2cm]) vertical alignment inside the box (top, center, bottom). The contents are typeset as if it were a mini page of that width. Example: latex \\parbox[c][12mm][c]{20mm}{Hello \\\\ World}\r‚Üí box 20mm wide, 12mm tall, content centered vertically, with two lines of text. Think: ‚Äúa mini container that controls line breaking and vertical alignment‚Äù. 11.2.2 \\fbox \\fbox just draws a frame around whatever box you give it. It does not set width, height, or alignment by itself ‚Äî it wraps its contents. By default, it adds inner padding (\\fboxsep) and uses line thickness (\\fboxrule). Example: latex \\fbox{Hello}\r‚Üí draws a rectangle just large enough to fit ‚ÄúHello‚Äù plus padding. Think: ‚Äúa picture frame for an existing box‚Äù. 11.2.3 The difference \\parbox = content box (controls size + vertical alignment). \\fbox = frame wrapper (draws a border around its contents). They are often used together: latex \\fbox{ \\parbox[c][12mm][c]{20mm}{Hello} }\r‚Üí a framed box, fixed width = 20mm, fixed height = 12mm, with ‚ÄúHello‚Äù centered inside. That‚Äôs exactly what we did for your \\digitbox: \\parbox ensures the box has fixed width/height and centers the content. \\fbox then draws the border around it. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:5:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#parbox"},{"categories":["LaTeX"],"content":"\r11.2 2. What is the parbox and what is the difference with fbox?\r11.2.1 \\parbox A \\parbox is a text box that can contain paragraph material (multiple lines, text, math, etc.). You can specify: width ‚Üí mandatory argument (e.g., 5cm) height ‚Üí optional argument (e.g., [2cm]) vertical alignment inside the box (top, center, bottom). The contents are typeset as if it were a mini page of that width. Example: latex \\parbox[c][12mm][c]{20mm}{Hello \\\\ World}\r‚Üí box 20mm wide, 12mm tall, content centered vertically, with two lines of text. Think: ‚Äúa mini container that controls line breaking and vertical alignment‚Äù. 11.2.2 \\fbox \\fbox just draws a frame around whatever box you give it. It does not set width, height, or alignment by itself ‚Äî it wraps its contents. By default, it adds inner padding (\\fboxsep) and uses line thickness (\\fboxrule). Example: latex \\fbox{Hello}\r‚Üí draws a rectangle just large enough to fit ‚ÄúHello‚Äù plus padding. Think: ‚Äúa picture frame for an existing box‚Äù. 11.2.3 The difference \\parbox = content box (controls size + vertical alignment). \\fbox = frame wrapper (draws a border around its contents). They are often used together: latex \\fbox{ \\parbox[c][12mm][c]{20mm}{Hello} }\r‚Üí a framed box, fixed width = 20mm, fixed height = 12mm, with ‚ÄúHello‚Äù centered inside. That‚Äôs exactly what we did for your \\digitbox: \\parbox ensures the box has fixed width/height and centers the content. \\fbox then draws the border around it. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:5:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#fbox"},{"categories":["LaTeX"],"content":"\r11.2 2. What is the parbox and what is the difference with fbox?\r11.2.1 \\parbox A \\parbox is a text box that can contain paragraph material (multiple lines, text, math, etc.). You can specify: width ‚Üí mandatory argument (e.g., 5cm) height ‚Üí optional argument (e.g., [2cm]) vertical alignment inside the box (top, center, bottom). The contents are typeset as if it were a mini page of that width. Example: latex \\parbox[c][12mm][c]{20mm}{Hello \\\\ World}\r‚Üí box 20mm wide, 12mm tall, content centered vertically, with two lines of text. Think: ‚Äúa mini container that controls line breaking and vertical alignment‚Äù. 11.2.2 \\fbox \\fbox just draws a frame around whatever box you give it. It does not set width, height, or alignment by itself ‚Äî it wraps its contents. By default, it adds inner padding (\\fboxsep) and uses line thickness (\\fboxrule). Example: latex \\fbox{Hello}\r‚Üí draws a rectangle just large enough to fit ‚ÄúHello‚Äù plus padding. Think: ‚Äúa picture frame for an existing box‚Äù. 11.2.3 The difference \\parbox = content box (controls size + vertical alignment). \\fbox = frame wrapper (draws a border around its contents). They are often used together: latex \\fbox{ \\parbox[c][12mm][c]{20mm}{Hello} }\r‚Üí a framed box, fixed width = 20mm, fixed height = 12mm, with ‚ÄúHello‚Äù centered inside. That‚Äôs exactly what we did for your \\digitbox: \\parbox ensures the box has fixed width/height and centers the content. \\fbox then draws the border around it. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:5:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#the-difference"},{"categories":["LaTeX"],"content":"\r12 Time to use them\rLatex \\[ \\begin{array}{@{} r r r r @{}} \\phantom{+} \u0026 \\emptybox \u0026 \\emptybox \u0026 \\emptybox \\\\ % --- Explicit extra space between rows (very reliable) --- \\noalign{\\vskip 6pt} + \u0026 \\digitbox{\\Large 3} \u0026 \\digitbox{\\Large 7} \u0026 \\digitbox{\\Large A} \\\\ % Space above/below the rule so it doesn't touch the boxes \\noalign{\\vskip 4pt} \\cline{2-4} \\noalign{\\vskip 6pt} \u0026 \u0026 \u0026 \\makebox[10mm][r]{123} \\end{array} \\]\r","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:0","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#time-to-use-them"},{"categories":["LaTeX"],"content":"\r12.1 Start math modeWe start with \\[ \\] which is equivalent to \\begin{displaymath} ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:1","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#start-math-mode"},{"categories":["LaTeX"],"content":"\r12.2 Start defining an array layoutthen we do latex \\begin{array}{@{} r r r r @{}}\rThis tells LaTeX how to typeset the columns of the array (or tabular). 12.2.1 The pieces r Means right-aligned column. So here we have 4 right-aligned columns: r r r r @{...} Inserts custom material instead of the default inter-column spacing. By default, LaTeX puts some horizontal padding (\\tabcolsep) at the left, between, and at the right of columns. @{} with empty braces means: remove that padding entirely. So: The leading @{} removes the left padding at the very start of the array. The trailing @{} removes the right padding at the very end. So @{} r r r r @{} means ‚ÄúMake 4 right-aligned columns, and strip off the default horizontal padding on the far left and far right.‚Äù 12.2.2 Why we use it here Without @{}, you‚Äôd get extra whitespace around the array (so the boxes wouldn‚Äôt line up snugly with the plus sign or with the rule). With @{}, you have tight control: the array content starts exactly at the left edge of the first column and ends exactly at the right edge of the last column. 12.2.3 Visual summary Column specifier Effect {r r r r} 4 right-aligned columns with normal LaTeX spacing at the edges {@{} r r r r @{}} 4 right-aligned columns with no extra space at left or right {l c r} left, center, right aligned columns {r@{+}r} 2 right-aligned columns with a literal + printed between them ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#start-defining-an-array-layout"},{"categories":["LaTeX"],"content":"\r12.2 Start defining an array layoutthen we do latex \\begin{array}{@{} r r r r @{}}\rThis tells LaTeX how to typeset the columns of the array (or tabular). 12.2.1 The pieces r Means right-aligned column. So here we have 4 right-aligned columns: r r r r @{...} Inserts custom material instead of the default inter-column spacing. By default, LaTeX puts some horizontal padding (\\tabcolsep) at the left, between, and at the right of columns. @{} with empty braces means: remove that padding entirely. So: The leading @{} removes the left padding at the very start of the array. The trailing @{} removes the right padding at the very end. So @{} r r r r @{} means ‚ÄúMake 4 right-aligned columns, and strip off the default horizontal padding on the far left and far right.‚Äù 12.2.2 Why we use it here Without @{}, you‚Äôd get extra whitespace around the array (so the boxes wouldn‚Äôt line up snugly with the plus sign or with the rule). With @{}, you have tight control: the array content starts exactly at the left edge of the first column and ends exactly at the right edge of the last column. 12.2.3 Visual summary Column specifier Effect {r r r r} 4 right-aligned columns with normal LaTeX spacing at the edges {@{} r r r r @{}} 4 right-aligned columns with no extra space at left or right {l c r} left, center, right aligned columns {r@{+}r} 2 right-aligned columns with a literal + printed between them ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#the-pieces"},{"categories":["LaTeX"],"content":"\r12.2 Start defining an array layoutthen we do latex \\begin{array}{@{} r r r r @{}}\rThis tells LaTeX how to typeset the columns of the array (or tabular). 12.2.1 The pieces r Means right-aligned column. So here we have 4 right-aligned columns: r r r r @{...} Inserts custom material instead of the default inter-column spacing. By default, LaTeX puts some horizontal padding (\\tabcolsep) at the left, between, and at the right of columns. @{} with empty braces means: remove that padding entirely. So: The leading @{} removes the left padding at the very start of the array. The trailing @{} removes the right padding at the very end. So @{} r r r r @{} means ‚ÄúMake 4 right-aligned columns, and strip off the default horizontal padding on the far left and far right.‚Äù 12.2.2 Why we use it here Without @{}, you‚Äôd get extra whitespace around the array (so the boxes wouldn‚Äôt line up snugly with the plus sign or with the rule). With @{}, you have tight control: the array content starts exactly at the left edge of the first column and ends exactly at the right edge of the last column. 12.2.3 Visual summary Column specifier Effect {r r r r} 4 right-aligned columns with normal LaTeX spacing at the edges {@{} r r r r @{}} 4 right-aligned columns with no extra space at left or right {l c r} left, center, right aligned columns {r@{+}r} 2 right-aligned columns with a literal + printed between them ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#why-we-use-it-here"},{"categories":["LaTeX"],"content":"\r12.2 Start defining an array layoutthen we do latex \\begin{array}{@{} r r r r @{}}\rThis tells LaTeX how to typeset the columns of the array (or tabular). 12.2.1 The pieces r Means right-aligned column. So here we have 4 right-aligned columns: r r r r @{...} Inserts custom material instead of the default inter-column spacing. By default, LaTeX puts some horizontal padding (\\tabcolsep) at the left, between, and at the right of columns. @{} with empty braces means: remove that padding entirely. So: The leading @{} removes the left padding at the very start of the array. The trailing @{} removes the right padding at the very end. So @{} r r r r @{} means ‚ÄúMake 4 right-aligned columns, and strip off the default horizontal padding on the far left and far right.‚Äù 12.2.2 Why we use it here Without @{}, you‚Äôd get extra whitespace around the array (so the boxes wouldn‚Äôt line up snugly with the plus sign or with the rule). With @{}, you have tight control: the array content starts exactly at the left edge of the first column and ends exactly at the right edge of the last column. 12.2.3 Visual summary Column specifier Effect {r r r r} 4 right-aligned columns with normal LaTeX spacing at the edges {@{} r r r r @{}} 4 right-aligned columns with no extra space at left or right {l c r} left, center, right aligned columns {r@{+}r} 2 right-aligned columns with a literal + printed between them ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:2","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#visual-summary"},{"categories":["LaTeX"],"content":"\r12.3 The first line\rlatex \\phantom{+} \u0026 \\emptybox \u0026 \\emptybox \u0026 \\emptybox \\\\\rWe add an invisible + in the first column and 3 empty boxes in the next 3 columns and change line ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:3","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#the-first-line"},{"categories":["LaTeX"],"content":"\r12.4 Skip line\rLatex \\noalign{\\vskip 6pt}\rThis forces vertical space between specific rows (and around \\cline), this is the ‚Äúnuclear option‚Äù that always works inside array/tabular. The rest do not require any explanation. ","date":"27-08-2025","objectID":"/2025-08-31-latexboxes/:6:4","series":null,"tags":["latex","boxes"],"title":"LaTeX: Creating placeholder boxes for mathematical operations","uri":"/2025-08-31-latexboxes/#skip-line"}]